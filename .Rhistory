head(transactions)
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = city)
transactions_grouped
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = c(date,city))
transactions_grouped
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(as.Date(date))
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formated_date = as.Date(date))
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formated_date = as.Date(date, format = "%d-%mmm-%Y"))
transactions |> head()
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formated_date = as.Date(date, format = "%d-%M-%Y"))
transactions |> head()
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formated_date = as.Date(date, format = "%d-%b-%Y"))
transactions |> head()
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formated_date = as.Date(date, format = "%dd-%b-%Y"))
transactions |> head()
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formated_date = as.Date(date, format = "%d-%b-%Y"))
transactions |> head()
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formated_date = as.Date(date, format = "%d-%b-%y"))
transactions |> head()
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formatted_date = as.Date(date, format = "%d-%b-%y"))
transactions |> head()
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = c(formatted_date,city))
transactions_grouped
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = c(formatted_date))
transactions_grouped
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formatted_date = as.Date(date, format = "%d-%b-%y"))
transactions <- transationc |> arrange(date)
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formatted_date = as.Date(date, format = "%d-%b-%y"))
transactions <- transationc |> arrange(formatted_date)
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formatted_date = as.Date(date, format = "%d-%b-%y"))
transactions <- transactions |> arrange(formatted_date)
transactions |> head()
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formatted_date = as.Date(date, format = "%d-%b-%y")) |>
arrange(formatted_date)
transactions |> head()
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = c(formatted_date))
transactions_grouped
transactions_grouped
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = c(formatted_date))
plot(transactions_grouped)
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = c(formatted_date))
head(transactions_grouped)
plot(transactions_grouped)
library(tidyverse)
library(ggplot2)
library(tseries)
ggplot(transactions_grouped, aes = (x=formatted_date, y=total_amount)) + geom_line())
ggplot(transactions_grouped, aes = (x = formatted_date, y = total_amount)) + geom_line())
ggplot(transactions_grouped,
mapping = aes(x = formatted_date,
y = total_amount))+ geom_line())
ggplot(transactions_grouped,
mapping = aes(x = formatted_date,
y = total_amount)) + geom_line()
adf.test(transactions_grouped$total_amount)
adf.test(transactions_grouped$total_amount, k = 30)
adf.test(transactions_grouped$total_amount, k = 60)
adf.test(transactions_grouped$total_amount, k = 30)
adf.test(transactions_grouped$total_amount, k = 31)
adf.test(transactions_grouped$total_amount, k = 45)
adf.test(transactions_grouped$total_amount, k = 31)
pp.test(transactions_grouped$total_amount, alternative = c("stationary", "explosive"),
type = c("Z(alpha)", "Z(t_alpha)"), lshort = TRUE)
pp.test(transactions_grouped$total_amount, alternative = c("stationary"),
type = c("Z(alpha)", "Z(t_alpha)"), lshort = TRUE)
pp.test(transactions_grouped$total_amount, alternative = c("explosive"),
type = c("Z(alpha)", "Z(t_alpha)"), lshort = TRUE)
pp.test(transactions_grouped$total_amount, alternative = c("stationary"),
type = c("Z(alpha)", "Z(t_alpha)"), lshort = TRUE)
adf.test(transactions_grouped$total_amount, k = 31, alternative = "explosive")
adf.test(transactions_grouped$total_amount, k = 31)
pp.test(transactions_grouped$total_amount,
k = 31,
alternative = c("stationary"),
type = c("Z(alpha)", "Z(t_alpha)"), lshort = TRUE)
pp.test(transactions_grouped$total_amount,
alternative = c("stationary"),
type = c("Z(alpha)", "Z(t_alpha)"), lshort = TRUE)
pp.test(transactions_grouped$total_amount,
alternative = c("stationary"),
type = c("Z(t_alpha)"), lshort = FALSE)
<style type="text/css">
library(tidyverse)
library(ggplot2)
library(tseries)
transactions <- read_csv("data/credit_card_transactions.csv")
transactions |> names() <- transactions |> names() |> tolower()
transactions <- transactions |> mutate(formatted_date = as.Date(date, format = "%d-%b-%y")) |>
arrange(formatted_date)
transactions |> head()
#Aggregate the data for stationarity test
transactions_grouped <- transactions |> summarize(total_amount = sum(amount), .by = c(formatted_date))
head(transactions_grouped)
ggplot(transactions_grouped,
mapping = aes(x = formatted_date,
y = total_amount)) + geom_line()
adf.test(transactions_grouped$total_amount, k = 31)
pp.test(transactions_grouped$total_amount,
alternative = c("stationary"),
type = c("Z(t_alpha)"), lshort = FALSE)
quantile(rnorm(200),probs = seq(0.01,0.99,0.01))
qqnorm(trees$Height)
install.packages("palmerpenguins")
library(tidyverse)
library(ggplot2)
library(tseries)
library(palmerpenguins)
data(package = 'palmerpenguins')
data(package = 'palmerpenguins')
head(penguins)
hist(penguins$bill_length_mm)
plot(density(penguins$bill_length_mm))
bill_length <- penguins$bill_length_mm
hist(bill_length)
samples <- sample(bill_length, replace = TRUE)
samples <- sample(bill_length, replace = TRUE)
samples
samples <- sample(bill_length,500 ,replace = TRUE)
hist(bill_length)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,50 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,1000 ,replace = TRUE)
hist(samples)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,1000 ,replace = TRUE)
hist(samples)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,1000 ,replace = TRUE)
hist(samples)
head(samples)
samples
# Load necessary library
library(ggplot2)
# Function to demonstrate CLT
check_clt <- function(population, sample_size, num_samples) {
sample_means <- numeric(num_samples)
for (i in 1:num_samples) {
sample <- sample(population, sample_size, replace = TRUE)
sample_means[i] <- mean(sample)
}
# Plotting the sample means
qplot(sample_means, bins = 30, xlab = 'Sample Means', main = paste('Distribution of Sample Means\nSample Size =', sample_size)) +
geom_histogram(aes(y = ..density..), binwidth = .5, colour = "black", fill = "white") +
geom_density(alpha = .2, fill = "#FF6666")
}
# Create a non-normal population (e.g., exponential distribution)
set.seed(123)
population <- rexp(10000, rate = 0.1)
# Check CLT with different sample sizes
check_clt(population, sample_size = 30, num_samples = 1000)
check_clt(population, sample_size = 50, num_samples = 1000)
check_clt(population, sample_size = 100, num_samples = 1000)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples, bins=100)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,1000 ,replace = TRUE)
hist(samples)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,1000 ,replace = TRUE)
hist(samples)
library(moments)
#calculate skewness
skewness(samples)
#calculate kurtosis
kurtosis(samples)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,500 ,replace = TRUE)
hist(samples)
samples <- sample(bill_length,1000 ,replace = TRUE)
hist(samples)
library(moments)
#calculate skewness
skewness(samples)
#calculate kurtosis
kurtosis(samples)
library(moments)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
samples <- sample(bill_length,1000 ,replace = TRUE)
density(samples)
samples <- sample(bill_length,1000 ,replace = TRUE)
density(samples, na.rm = TRUE)
samples <- sample(bill_length,1000 ,replace = TRUE)
density(samples, na.rm = TRUE)
plot(density)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
bill_length <- penguins |> filter(species = "Adelie") |> select(bill_length_mm)
bill_length <- penguins |> filter(species == "Adelie") |> select(bill_length_mm)
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie") |> pull(bill_length_mm)
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm)
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,5000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
library(moments)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
library(moments)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
library(moments)
library("car")
library(moments)
library(car)
install.packages("car")
library(car)
library(moments)
library(car)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,5000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
size(bill_length)
nrow(bill_length)
dim(bill_length)
length(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm |> head(15))
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm |> head(5))
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm |> head(1))
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(1) |> pull(bill_length_mm)
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(5) |> pull(bill_length_mm)
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
library(moments)
library(car)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(50) |> pull(bill_length_mm)
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(50) |> pull(bill_length_mm)
hist(bill_length)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
set.seed(42)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,5000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,10 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
# Assuming you've already loaded the palmerpenguins package and its data
library(palmerpenguins)
# Using the body mass of penguins for this example
# Remove NA values from the dataset
penguin_data <- na.omit(penguins$body_mass_g)
# Calculate mean and standard deviation
mean_val <- mean(penguin_data)
sd_val <- sd(penguin_data)
# Calculate percentages within one, two, and three standard deviations
within_one_sd <- mean(abs(penguin_data - mean_val) <= sd_val)
within_two_sd <- mean(abs(penguin_data - mean_val) <= 2 * sd_val)
within_three_sd <- mean(abs(penguin_data - mean_val) <= 3 * sd_val)
# Print results
cat("Percentage within 1 SD (expected ~68%):", within_one_sd * 100, "%\n")
cat("Percentage within 2 SD (expected ~95%):", within_two_sd * 100, "%\n")
cat("Percentage within 3 SD (expected ~99.7%):", within_three_sd * 100, "%\n")
# Assuming you've already loaded the palmerpenguins package and its data
library(palmerpenguins)
# Using the body mass of penguins for this example
# Remove NA values from the dataset
penguin_data <- na.omit(penguins$bill_length_mm)
# Calculate mean and standard deviation
mean_val <- mean(penguin_data)
sd_val <- sd(penguin_data)
# Calculate percentages within one, two, and three standard deviations
within_one_sd <- mean(abs(penguin_data - mean_val) <= sd_val)
within_two_sd <- mean(abs(penguin_data - mean_val) <= 2 * sd_val)
within_three_sd <- mean(abs(penguin_data - mean_val) <= 3 * sd_val)
# Print results
cat("Percentage within 1 SD (expected ~68%):", within_one_sd * 100, "%\n")
cat("Percentage within 2 SD (expected ~95%):", within_two_sd * 100, "%\n")
cat("Percentage within 3 SD (expected ~99.7%):", within_three_sd * 100, "%\n")
