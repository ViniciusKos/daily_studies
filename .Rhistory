dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
bill_length <- penguins |> filter(species = "Adelie") |> select(bill_length_mm)
bill_length <- penguins |> filter(species == "Adelie") |> select(bill_length_mm)
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie") |> pull(bill_length_mm)
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm)
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,5000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
library(moments)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
library(moments)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
library(moments)
library("car")
library(moments)
library(car)
install.packages("car")
library(car)
library(moments)
library(car)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,5000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
size(bill_length)
nrow(bill_length)
dim(bill_length)
length(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm |> head(15))
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm |> head(5))
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> pull(bill_length_mm |> head(1))
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(1) |> pull(bill_length_mm)
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(5) |> pull(bill_length_mm)
hist(bill_length)
set.seed(42)
samples <- sample(bill_length,100 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,500 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
library(moments)
library(car)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(50) |> pull(bill_length_mm)
hist(bill_length)
bill_length <- penguins |> filter(species == "Adelie" &
island == "Torgersen") |> head(50) |> pull(bill_length_mm)
hist(bill_length)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
qqline(samples, col = "steelblue", lwd = 2)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
set.seed(42)
samples <- sample(bill_length,1000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,5000 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
set.seed(42)
samples <- sample(bill_length,10 ,replace = TRUE)
dens <- density(samples, na.rm = TRUE)
plot(dens)
#calculate skewness
skewness(samples, na.rm=TRUE)
#calculate kurtosis
kurtosis(samples, na.rm=TRUE)
ggplot(data.frame(sample = samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Penguin Body Mass") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles")
shapiro_test_result <- shapiro.test(samples)
shapiro_test_result
# Assuming you've already loaded the palmerpenguins package and its data
library(palmerpenguins)
# Using the body mass of penguins for this example
# Remove NA values from the dataset
penguin_data <- na.omit(penguins$body_mass_g)
# Calculate mean and standard deviation
mean_val <- mean(penguin_data)
sd_val <- sd(penguin_data)
# Calculate percentages within one, two, and three standard deviations
within_one_sd <- mean(abs(penguin_data - mean_val) <= sd_val)
within_two_sd <- mean(abs(penguin_data - mean_val) <= 2 * sd_val)
within_three_sd <- mean(abs(penguin_data - mean_val) <= 3 * sd_val)
# Print results
cat("Percentage within 1 SD (expected ~68%):", within_one_sd * 100, "%\n")
cat("Percentage within 2 SD (expected ~95%):", within_two_sd * 100, "%\n")
cat("Percentage within 3 SD (expected ~99.7%):", within_three_sd * 100, "%\n")
# Assuming you've already loaded the palmerpenguins package and its data
library(palmerpenguins)
# Using the body mass of penguins for this example
# Remove NA values from the dataset
penguin_data <- na.omit(penguins$bill_length_mm)
# Calculate mean and standard deviation
mean_val <- mean(penguin_data)
sd_val <- sd(penguin_data)
# Calculate percentages within one, two, and three standard deviations
within_one_sd <- mean(abs(penguin_data - mean_val) <= sd_val)
within_two_sd <- mean(abs(penguin_data - mean_val) <= 2 * sd_val)
within_three_sd <- mean(abs(penguin_data - mean_val) <= 3 * sd_val)
# Print results
cat("Percentage within 1 SD (expected ~68%):", within_one_sd * 100, "%\n")
cat("Percentage within 2 SD (expected ~95%):", within_two_sd * 100, "%\n")
cat("Percentage within 3 SD (expected ~99.7%):", within_three_sd * 100, "%\n")
library(tidyverse)
library(ggplot2)
loan <- read_csv("data\cr_loan2.csv")
loan <- read_csv("data/cr_loan2.csv")
head(loan)
loan |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = loan_intent)
loan |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good))
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = feature) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total>0)
}
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = feature) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total>0)
}
calculate(loan, loan_intent, loan_status)
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = !!sym(feature)) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total>0)
}
calculate(loan, loan_intent, loan_status)
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = !!sym(feature)) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total>0)
}
calculate(loan, loan_intent, loan_status)
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = feature |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total>0)
}
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = feature |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)}
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = feature |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = feature) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
calculate(loan, loan_intent, loan_status)
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = !!sym(feature)) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
calculate(loan, loan_intent, loan_status)
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = loan_intent |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
calculate(loan, loan_intent, loan_status)
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = feature) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
calculate(loan, "loan_intent", "loan_status")
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(loan_status),
bad = sum(loan_status),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
woe_table |> head()
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(target == 1),
bad = sum(target == 0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
woe_table |> head()
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(target == 1),
bad = sum(target == 0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
woe_table |> head()
loan |>
summarise(good = sum(loan_status==1),
bad = sum(loan_status==0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good))
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(!!sym(target) == 1),
bad = sum(!!sym(target) == 0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
woe_table |> head()
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(!!sym(target) == 1),
bad = sum(!!sym(target) == 0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
woe_table <- log(dist_bad/dist_good)
return(woe_table)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(!!sym(target) == 1),
bad = sum(!!sym(target) == 0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
woe_table <- dist_table |>
mutate(woe = log(dist_bad/dist_good))
return(woe_table)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
woe_table |> head()
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(!!sym(target) == 1),
bad = sum(!!sym(target) == 0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
woe_table <- dist_table |>
mutate(
proportion = dist_bad/dist_good,
woe = log(dist_bad/dist_good))
return(woe_table)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
woe_table |> head()
options(digits=2)
calculate <- function(data, feature, target) {
dist_table <- data |>
summarise(good = sum(!!sym(target) == 1),
bad = sum(!!sym(target) == 0),
.by = loan_intent) |>
mutate(total = good+bad,
dist_good = good/sum(good),
dist_bad = bad/sum(bad)) |>
filter(total > 0)
woe_table <- dist_table |>
mutate(
proportion = dist_bad/dist_good,
woe = log(dist_bad/dist_good))
return(woe_table)
}
woe_table <- calculate(loan, "loan_intent", "loan_status")
woe_table |> head()
