import pandas as pd
import numpy as np

def stratified_sample(df, group_column, proportions):
    """
    Perform stratified sampling based on specific proportions per group.

    Parameters:
    - df: pandas DataFrame containing the dataset.
    - group_column: String, the name of the column that contains the group IDs.
    - proportions: Dictionary, where keys are the group IDs and values are the proportions for each group.

    Returns:
    - A sampled pandas DataFrame according to the specified proportions.
    """
    # Ensure the proportions sum to 1
    if not np.isclose(sum(proportions.values()), 1):
        raise ValueError("The sum of proportions must be 1.")
    
    # Calculate the sample size for each group
    sample_sizes = {group: int(total * proportion) for group, proportion in proportions.items()}
    
    # Sample each group according to its calculated sample size
    samples = [df[df[group_column] == group].sample(n=size, replace=False) for group, size in sample_sizes.items()]
    
    # Combine the samples from each group
    sampled_df = pd.concat(samples, ignore_index=True)
    
    return sampled_df

# Example usage
# Assuming `df` is your DataFrame, `group_column` is the column containing group IDs,
# and `proportions` is a dictionary with group IDs as keys and sampling proportions as values.
# proportions = {'group1': 0.5, 'group2': 0.3, 'group3': 0.2}
# sampled_df = stratified_sample(df, 'group_column_name', proportions)
